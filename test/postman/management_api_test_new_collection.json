{
	"info": {
		"_postman_id": "a8553536-714b-418b-a5e5-f8deb79cfaf4",
		"name": "torchserve_regression_management_new",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d2b0dba-e72e-4e72-9c95-abaaae1c745c",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model Mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "77153fbf-e739-4195-890e-570d4c539eea",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5506f098-0b92-41e4-b163-f755a89ac8af",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar&model_name=densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar"
						},
						{
							"key": "model_name",
							"value": "densenet161"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Model Re-Registration Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "011551ad-0fcd-4614-b3ce-c69b8aeac452",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "edab6eb3-4ec1-44fe-ba9e-b5b0fc0fd74b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar&model_name=densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar"
						},
						{
							"key": "model_name",
							"value": "densenet161"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "792ceb36-27ff-4a3b-9d69-09b0b1b702dd",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"densenet161"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model missing url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f40754d-d76b-444a-92a3-209f6173d6c7",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Existing Mnist Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cdcb6e5e-007a-45c6-ae5f-520440bde6a7",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a15440e6-3f2d-4468-8d35-9b13a43eabee",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7dcb9a93-f77a-416d-8129-655ba4ca09e1",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "100f8c4e-23ec-47d3-b141-e09c0eece4c7",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Invalid Mnist Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbe0e756-eaba-4e89-8d05-cbd1ee75256b",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a954182-5e2f-4fe7-a82c-ae12e704edd5",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Model - All Versions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa822b82-7af1-4a78-b982-66730982e9d9",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/all",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca5bbf6a-ff91-49e3-bd27-88b38b71ce8a",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Invalid Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a473ad8b-ec36-4703-b274-9c706fa38ec0",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Repeat Scaling Invalid Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e1ec68a-e0fe-41dc-9745-67b55d2f14a9",
						"exec": [
							"pm.test(\"Partial Success - Scale Invalid Handler model with Min workers request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e878e63-4342-4ce1-962d-c24c8c518fa9",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Model with Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c507bbf-04f1-471f-93d3-daf02228872d",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Valid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31e68ec8-cde2-4501-be7b-cf49fa6eae7f",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb8d5110-475c-471f-bb6a-5124d2867f2f",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model invalid Runtime",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e050d9c0-e981-4c67-b00a-311b0c1a6062",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&runtime=python4",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "runtime",
							"value": "python4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Models",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65dd9930-f50b-4fb7-815c-be090fd2084b",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=&next_page_token=",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": ""
						},
						{
							"key": "next_page_token",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23122a54-3dd1-4326-a8e6-c62ebdbddf87",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers - Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7dcd5439-11ca-4cc7-9396-462fd156761c",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=3",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b205d073-711f-463f-8400-90448483e41b",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers for a Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76c68209-7c9a-4402-ab96-fea66d99401c",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0?min_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers for a Valid model but Invalid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d16b75a0-c7b3-4c52-bb84-052773777278",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0?min_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers with GPU",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f181b5c-18cd-42b4-92e2-180f64dd4164",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=6&number_gpu=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "6"
						},
						{
							"key": "number_gpu",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default Model Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a85be487-2534-4855-a9ae-8725611de8ee",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default Valid Model Invalid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5fc0648-fd05-4a71-8ad1-5fc93ce1bfc4",
						"exec": [
							"pm.test(",
							"    \"Invalid Set Default Version request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default InValid Model valid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48eaf38e-8410-454b-8992-5390168812ed",
						"exec": [
							"pm.test(",
							"    \"Invalid Set Default Version request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet0_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet0_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1355b7bf-747e-47e5-b7e7-00fb439c1bc3",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Additional Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f99e89bd-c7c3-4257-abd2-009ecb346f09",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&handler=serve/ts/torch_handler/image_classifier.py:handle",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "handler",
							"value": "serve/ts/torch_handler/image_classifier.py:handle"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4edfda05-72f6-4e8b-b52b-1ca7c093d9f2",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Additional Params and response_timeout as 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdb7057a-bcee-4e61-917e-10fac6734214",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&batch_size=3&initial_workers=3&response_timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "batch_size",
							"value": "3"
						},
						{
							"key": "initial_workers",
							"value": "3"
						},
						{
							"key": "response_timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with response_timeout as 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "253e5c83-2053-4b4c-9a7f-1992d3eab176",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&response_timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "response_timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6fca02d1-cb0c-4c4a-a516-e5075a9a057c",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Batch Size",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eab03efd-3d6f-4d7f-b055-02c97e1c7079",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=2",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab7f193a-550e-45e8-a5e3-2feb2b38185d",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Non integer Batch Size",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a580f258-9c72-46a4-ba0c-2f2fd48c67d7",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=dd&initial_workers=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "dd"
						},
						{
							"key": "initial_workers",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7420450-eafe-4d85-8348-1f69b8842633",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with integer Batch Size but non integer max batch delay parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e04ee5a-ff84-4f26-9ae3-cdb9c7c06311",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=2&initial_workers=1&max_batch_delay=junk",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "2"
						},
						{
							"key": "initial_workers",
							"value": "1"
						},
						{
							"key": "max_batch_delay",
							"value": "junk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "968178d7-2ca4-4ebb-a274-f9bdba4aa211",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Vgg Model Negative initial workers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dfd79201-4b43-4d65-bd87-f6acfe1fa036",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/vgg11.mar&model_name=vgg11&initial_workers=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/vgg11.mar"
						},
						{
							"key": "model_name",
							"value": "vgg11"
						},
						{
							"key": "initial_workers",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Resnet Model Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6b2e072-1341-4cc8-975d-9f21487eb9ee",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63532cc7-f094-414d-bc88-0bca77eb286f",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model non boolean Synchronous value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "24f88a01-9a3e-4c28-8b82-3a5688eb1d46",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c28d29ed-e739-4c1d-a49e-377c65eea2e2",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Resnet Model Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d24f28f4-493a-4f83-9213-0bb5068bbfbd",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=false",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7ddbab9-255e-457a-8b66-ab0dcbe16963",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with \"Negative\" Limit Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c51596a7-c3ed-4efa-9192-4b71d2ea70a3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "29bb5b69-28f3-4205-a0bc-9c901f6f94bc",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1&next_page_token=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "next_page_token",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with \"Negative\" Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8faf64a4-edf4-417d-bab0-4c080f6ac490",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1&next_page_token=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "next_page_token",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update GPU Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "691bc6c2-7ecd-4313-a17e-6c7bb5f4b88d",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?number_gpu=10",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "number_gpu",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update with \"Negative\" GPU Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65016218-aa6f-4b0d-b4f0-f48e7f739f7d",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?number_gpu=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "number_gpu",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale up Workers -  Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "678187de-e902-401e-b13c-a81c2ed5c28f",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=5&max_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "max_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale up Workers - Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e49959f6-36e8-4bd9-9d88-81e13659eddb",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=6&max_worker=6&synchronous=false",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "6"
						},
						{
							"key": "max_worker",
							"value": "6"
						},
						{
							"key": "synchronous",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Timeout to -1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92c9b195-2960-4ff7-8c10-eac7a21fde52",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?timeout=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "timeout",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Timeout to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a8adbd9-5ec2-446e-8b33-e46ac972443e",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model - Empty URL , Valid Model Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd607621-161a-4ed0-9ad9-df99176e20d9",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=&model_name=resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": ""
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model - Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f649813c-7556-4150-b0b9-3f138b88e809",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/invalid-resnet-18.mar&model_name=invalid-resnet18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/invalid-resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "invalid-resnet18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Model - Invalid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d58a854c-6709-4318-a393-bc7e08c28b08",
						"exec": [
							"pm.test(",
							"    \"Invalid ListModels request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Model - Valid model name, Invalid Model version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d4bfd57-e84f-4930-95dd-f5f6d7d5b30c",
						"exec": [
							"pm.test(",
							"    \"Invalid ListModels request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Models - Invalid Next Page Token(Outside registered models range)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a723690-530b-4620-aa8c-1cee6b19c9e4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?next_page_token=12",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "next_page_token",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Workers - Valid \"min_worker\" value, Invalid \"synchronous\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e96882ce-cf09-4271-9022-1080fc990943",
						"exec": [
							"pm.test(\"Successful PUT message for scaling workers with unrecognized synchronous value\", function () {",
							"    pm.expect(pm.response.code).to.be.eql(202);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=2&synchronous=Nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "2"
						},
						{
							"key": "synchronous",
							"value": "Nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Workers - Invalid parameter values for both \"synchronous\" & \"min_worker\" params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97dab5d1-7817-4589-a8bc-2b1f7824863d",
						"exec": [
							"pm.test(\"Successful PUT message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=nan&synchronous=nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "nan"
						},
						{
							"key": "synchronous",
							"value": "nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale down workers by Calling Update Workers API with no parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "344081f0-e3e3-495d-b3b4-b5b9695a2547",
						"exec": [
							"pm.test(\"Successful PUT message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker for an invalid/non-existent model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e68be588-6c7e-4133-b295-3d590166fed2",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet181?min_worker=3",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet181"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with Invalid Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa0184c5-6a17-4f7d-a792-1b250c9d0aae",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=10&max_worker=9",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "10"
						},
						{
							"key": "max_worker",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with Positive Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76c9919c-f0b1-4946-b79b-fb9f1c864aed",
						"exec": [
							"pm.test(\"Valid SCALE request message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=4",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with \"Zero\" Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "595d36f8-3f10-422a-adda-ce9dd96b7dc8",
						"exec": [
							"pm.test(\"Valid SCALE request message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale worker by calling Update Worker API with negative min worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99cfa8c9-33f0-4a43-bff8-127fe2a3b75c",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale worker by calling Update Worker API with negative max worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a65e8487-8ad0-43aa-89af-d13f3098cc2b",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?max_worker=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "max_worker",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Version - Invalid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7faa913e-6fec-46f4-af4f-bec20e45c6a8",
						"exec": [
							"pm.test(",
							"    \"Invalid Set Default Version request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "741e569d-b291-4536-82da-a5ed463bcfb9",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Valid Model name, but Invalid Model version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e669d3a3-23e1-496a-b113-273b9332be00",
						"exec": [
							"pm.test(",
							"    \"Invalid UnRegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with synchronous value as true",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6854086-677a-4c5b-b8a3-c610c578b2f3",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with synchronous value as non boolean",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65ec2beb-e8c9-40e9-956b-604703d2abf7",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?synchronous=nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "synchronous",
							"value": "nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with non integer timeout value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2800b970-0478-4148-a0fb-a71ae3b711df",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?timeout=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "timeout",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with non boolean synchronous value & non integer timeout value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9882d99b-8a65-4fc7-97a2-4653b7e7004b",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?timeout=true&synchronous=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "timeout",
							"value": "true"
						},
						{
							"key": "synchronous",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Vgg11",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c10aa254-d2c5-4ac3-b321-b70f9fb69550",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/vgg11",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"vgg11"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Invalid Model Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f38b296-8835-4e04-9f99-382c3a89dd1f",
						"exec": [
							"pm.test(",
							"    \"Invalid UnRegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202,210]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}